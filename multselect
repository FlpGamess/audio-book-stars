import React, { useState } from "react";
import { Chart } from "primereact/chart";
import { MultiSelect } from "primereact/multiselect";
import { Button } from "primereact/button";

const GraficoComidas = () => {
  const dadosOriginais = [
    { comida: "Pizza", vendas: 150, tipo: "Massa" },
    { comida: "Sushi", vendas: 100, tipo: "Japonesa" },
    { comida: "Hambúrguer", vendas: 200, tipo: "Fast-food" },
    { comida: "Lasanha", vendas: 75, tipo: "Massa" },
    { comida: "Tacos", vendas: 120, tipo: "Mexicana" },
    { comida: "Pizza", vendas: 120, tipo: "Massa" },
    { comida: "Sushi", vendas: 150, tipo: "Japonesa" },
  ];

  const [comidasSelecionadas, setComidasSelecionadas] = useState([]);
  const [vendasSelecionadas, setVendasSelecionadas] = useState([]);
  const [tiposSelecionados, setTiposSelecionados] = useState([]);

  const [modoComidaMultiplo, setModoComidaMultiplo] = useState(true);
  const [modoVendaMultiplo, setModoVendaMultiplo] = useState(true);
  const [modoTipoMultiplo, setModoTipoMultiplo] = useState(true);

  // 🔁 Dados com base em filtros cruzados

  const isok = (filtro, code, dado) => {
    if (!filtro.length) return true;
    return filtro.includes(dado[code]);
  };

  const dadosFiltrados = dadosOriginais.filter((item) => {
    return (
      isok(comidasSelecionadas, "comida", item) &&
      isok(vendasSelecionadas, "vendas", item) &&
      isok(tiposSelecionados, "tipo", item)
    );
  });

  // 🔍 Gerar opções com base nos dados filtrados cruzadamente

  const dadosParaFiltroComida =
    vendasSelecionadas.length === 0 && tiposSelecionados.length === 0
      ? dadosOriginais
      : dadosOriginais.filter((item) => {
          const vendaMatch =
            vendasSelecionadas.length === 0 ||
            vendasSelecionadas.includes(item.vendas);
          const tipoMatch =
            tiposSelecionados.length === 0 ||
            tiposSelecionados.includes(item.tipo);
          return vendaMatch && tipoMatch;
        });

  const dadosParaFiltroVenda =
    comidasSelecionadas.length === 0 && tiposSelecionados.length === 0
      ? dadosOriginais
      : dadosOriginais.filter((item) => {
          const comidaMatch =
            comidasSelecionadas.length === 0 ||
            comidasSelecionadas.includes(item.comida);
          const tipoMatch =
            tiposSelecionados.length === 0 ||
            tiposSelecionados.includes(item.tipo);
          return comidaMatch && tipoMatch;
        });

  const dadosParaFiltroTipo =
    comidasSelecionadas.length === 0 && vendasSelecionadas.length === 0
      ? dadosOriginais
      : dadosOriginais.filter((item) => {
          const comidaMatch =
            comidasSelecionadas.length === 0 ||
            comidasSelecionadas.includes(item.comida);
          const vendaMatch =
            vendasSelecionadas.length === 0 ||
            vendasSelecionadas.includes(item.vendas);
          return comidaMatch && vendaMatch;
        });

  // 🔽 Opções únicas
  const opcoesComida = [
    ...new Set(dadosParaFiltroComida.map((d) => d.comida)),
  ].map((comida) => ({ label: comida, value: comida }));

  const opcoesVenda = [
    ...new Set(dadosParaFiltroVenda.map((d) => d.vendas)),
  ].map((venda) => ({ label: `R$ ${venda}`, value: venda }));

  const opcoesTipo = [...new Set(dadosParaFiltroTipo.map((d) => d.tipo))].map(
    (tipo) => ({ label: tipo, value: tipo })
  );

  const chartData = {
    labels: dadosFiltrados.map((item) => item.comida),
    datasets: [
      {
        label: "Vendas",
        data: dadosFiltrados.map((item) => item.vendas),
        backgroundColor: "#42A5F5",
      },
    ],
  };

  const chartOptions = {
    plugins: {
      legend: {
        labels: { color: "#333" },
      },
    },
  };

  // Alternar modo Comida
  const toggleModoComida = () => {
    const novoModo = !modoComidaMultiplo;
    setModoComidaMultiplo(novoModo);
    if (!novoModo && comidasSelecionadas.length > 1) {
      setComidasSelecionadas([comidasSelecionadas[0]]);
    }
  };
  const toggleModoTipo = () => {
    const novoModo = !modoTipoMultiplo;
    setModoTipoMultiplo(novoModo);
    if (!novoModo && tiposSelecionados.length > 1) {
      setTiposSelecionados([tiposSelecionados[0]]);
    }
  };

  // Alternar modo Venda
  const toggleModoVenda = () => {
    const novoModo = !modoVendaMultiplo;
    setModoVendaMultiplo(novoModo);
    if (!novoModo && vendasSelecionadas.length > 1) {
      setVendasSelecionadas([vendasSelecionadas[0]]);
    }
  };

  return (
    <div className="card flex flex-column gap-4">
      <div>
        <h3>Filtrar por comida:</h3>
        <Button
          label={`Modo: ${modoComidaMultiplo ? "Múltiplo" : "Único"}`}
          onClick={toggleModoComida}
          className="mb-2"
        />
        <MultiSelect
          value={comidasSelecionadas}
          options={opcoesComida}
          onChange={(e) => {
            let valor = e.value;
            if (valor === null || valor === undefined) {
              valor = [];
            }

            setComidasSelecionadas(
              modoComidaMultiplo ? valor : valor.slice(-1)
            );
          }}
          placeholder="Selecione comidas"
          display="chip"
          filter
          className="w-full md:w-20rem"
        />
      </div>

      <div>
        <h3>Filtrar por valor de venda:</h3>
        <Button
          label={`Modo: ${modoVendaMultiplo ? "Múltiplo" : "Único"}`}
          onClick={toggleModoVenda}
          className="mb-2"
        />
        <MultiSelect
          value={vendasSelecionadas}
          options={opcoesVenda}
          onChange={(e) => {
            let valor = e.value;
            if (valor === null || valor === undefined) {
              valor = [];
            }

            setVendasSelecionadas(modoVendaMultiplo ? valor : valor.slice(-1));
          }}
          placeholder="Selecione valores"
          display="chip"
          filter
          className="w-full md:w-20rem"
        />
      </div>

      <div>
        <h3>Filtrar por tipo de comida:</h3>
        <Button
          label={`Modo: ${modoTipoMultiplo ? "Múltiplo" : "Único"}`}
          onClick={toggleModoTipo}
          className="mb-2"
        />
        <MultiSelect
          value={tiposSelecionados}
          options={opcoesTipo}
          onChange={(e) => {
            let valor = e.value;
            if (valor === null || valor === undefined) {
              valor = [];
            }

            setTiposSelecionados(modoTipoMultiplo ? valor : valor.slice(-1));
          }}
          placeholder="Selecione tipos"
          display="chip"
          filter
          className="w-full md:w-20rem"
        />
      </div>

      <Chart type="bar" data={chartData} options={chartOptions} />
    </div>
  );
};

export default GraficoComidas;
